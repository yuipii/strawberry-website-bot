from flask import Flask, request, jsonify, send_from_directory
from flask_cors import CORS
import requests
import logging
import time
from datetime import datetime
import concurrent.futures
from dotenv import load_dotenv
import os
import json
import threading
import sqlite3
from collections import defaultdict

load_dotenv()

app = Flask(__name__)
CORS(app)
logging.basicConfig(level=logging.INFO)
PRODUCTS_FILE = 'products.json'
ORDERS_DB = 'orders.db'

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID —á–∞—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
SELLER_CHAT_ID = os.getenv("SELLER_CHAT_ID")
ADMIN_CHAT_IDS = os.getenv("ADMIN_CHAT_IDS")  # –î–æ–±–∞–≤–ª—è–µ–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

# –°–æ–∑–¥–∞–µ–º –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
thread_pool = concurrent.futures.ThreadPoolExecutor(max_workers=3)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
products = []

# –§–ª–∞–≥ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ long polling
stop_polling = False

def check_bot_availability():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    try:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/getMe"
        response = requests.get(url, timeout=10)
        
        if response.status_code == 200:
            bot_info = response.json()
            logging.info(f"–ë–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω: {bot_info['result']['first_name']} (@{bot_info['result']['username']})")
            return True
        else:
            logging.error(f"–ë–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            return False
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–æ—Ç–∞: {e}")
        return False

def send_to_telegram_async(message, chat_id=None):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    return thread_pool.submit(send_to_telegram, message, chat_id)

def send_to_telegram(message, chat_id=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏"""
    try:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        payload = {
            'chat_id': chat_id or SELLER_CHAT_ID,
            'text': message,
            'parse_mode': 'HTML',
            'disable_web_page_preview': True
        }
        
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∞–π–º–∞—É—Ç—ã: connect=3s, read=10s
        response = requests.post(url, json=payload, timeout=(3, 10))
        
        if response.status_code == 200:
            logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
            return True
        else:
            logging.error(f"–û—à–∏–±–∫–∞ Telegram API: {response.status_code}, {response.text}")
            return False
                
    except requests.exceptions.Timeout:
        logging.warning("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram")
        return False
    except requests.exceptions.ConnectionError:
        logging.warning("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram")
        return False
    except Exception as e:
        logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")
        return False

def format_order_message(order_data):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ"""
    try:
        items_text = "\n".join(
            f"‚Ä¢ {item['name']} - {item['quantity']} {item['unit']} √ó {item['price']} ‚ÇΩ = {item['quantity'] * item['price']} ‚ÇΩ"
            for item in order_data['items']
        )
        
        message = (
            f"üõí <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó</b>\n\n"
            f"üë§ <b>{escape_html(order_data['customer']['name'])}</b>\n"
            f"üìû {escape_html(order_data['customer']['phone'])}\n"
            f"üìç {escape_html(order_data['customer']['address'])}\n\n"
            f"üöö <b>–î–æ—Å—Ç–∞–≤–∫–∞:</b>\n"
            f"{escape_html(order_data['delivery']['date'])} {escape_html(order_data['delivery']['time'])}\n\n"
            f"üì¶ <b>–¢–æ–≤–∞—Ä—ã:</b>\n{items_text}\n\n"
            f"üí∞ <b>–ò—Ç–æ–≥–æ: {order_data['totals']['total']} ‚ÇΩ</b>\n"
            f"(–¢–æ–≤–∞—Ä—ã: {order_data['totals']['subtotal']} ‚ÇΩ + –î–æ—Å—Ç–∞–≤–∫–∞: {order_data['totals']['delivery']} ‚ÇΩ)\n\n"
        )
        
        if order_data.get('comment'):
            message += f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b>\n{escape_html(order_data['comment'])}\n\n"
        
        payment_method = "–ù–∞–ª–∏—á–Ω—ã–º–∏" if order_data['payment'] == 'cash' else "–ö–∞—Ä—Ç–æ–π –æ–Ω–ª–∞–π–Ω"
        message += f"üí≥ <b>–û–ø–ª–∞—Ç–∞:</b> {payment_method}\n"
        message += f"‚è∞ <b>–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        
        return message
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞: {e}"

def escape_html(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML —Å–∏–º–≤–æ–ª–æ–≤"""
    if not text:
        return ""
    return str(text).replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')

def load_products():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
    global products
    try:
        if os.path.exists(PRODUCTS_FILE):
            with open(PRODUCTS_FILE, 'r', encoding='utf-8') as f:
                products = json.load(f)
                logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(products)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞")
                return products
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {e}")
    
    products = get_default_products()
    save_products(products)
    return products

def save_products(products_list):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ —Ñ–∞–π–ª"""
    try:
        with open(PRODUCTS_FILE, 'w', encoding='utf-8') as f:
            json.dump(products_list, f, ensure_ascii=False, indent=2)
        logging.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(products_list)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ —Ñ–∞–π–ª")
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {e}")
        return False

def get_default_products():
    """–ü—Ä–æ–¥—É–∫—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    return [
        {
            "id": 1,
            "name": "–°–≤–µ–∂–∞—è –∫–ª—É–±–Ω–∏–∫–∞",
            "price": 500,
            "image": "https://images.unsplash.com/photo-1570913190149-e2a64af5c30f?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1000&q=80",
            "unit": "–∫–≥",
            "description": "–ù–∞—Ç—É—Ä–∞–ª—å–Ω–∞—è, —Å–æ—á–Ω–∞—è –∏ —Å–ª–∞–¥–∫–∞—è –∫–ª—É–±–Ω–∏–∫–∞, —Å–æ–±—Ä–∞–Ω–Ω–∞—è –≤—Ä—É—á–Ω—É—é —Å –ª—é–±–æ–≤—å—é.",
            "active": True
        },
        {
            "id": 2,
            "name": "–ö–ª—É–±–Ω–∏–∫–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ",
            "price": 700,
            "image": "https://images.unsplash.com/photo-1464454709131-ffd692591ee5?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1000&q=80",
            "unit": "–∫–æ—Ä–∑–∏–Ω–∞",
            "description": "–ò–¥–µ–∞–ª—å–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ –¥–ª—è –±–ª–∏–∑–∫–∏—Ö. –ö—Ä–∞—Å–∏–≤–æ, –≤–∫—É—Å–Ω–æ –∏ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ.",
            "active": True
        },
        {
            "id": 3,
            "name": "–ö–ª—É–±–Ω–∏–∫–∞ —Å–æ —Å–ª–∏–≤–∫–∞–º–∏",
            "price": 850,
            "image": "https://images.unsplash.com/photo-1556909114-f6e7ad7d3136?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1000&q=80",
            "unit": "–ø–æ—Ä—Ü–∏—è",
            "description": "–ù–µ–∂–Ω–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ —Å–≤–µ–∂–µ–π –∫–ª—É–±–Ω–∏–∫–∏ –∏ –¥–æ–º–∞—à–Ω–∏—Ö —Å–ª–∏–≤–æ–∫. –ò–¥–µ–∞–ª—å–Ω—ã–π –¥–µ—Å–µ—Ä—Ç.",
            "active": True
        }
    ]

def send_help_message(chat_id):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é"""
    help_text = """
ü§ñ <b>–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>

/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

üì¶ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏:</b>
/list - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã
/add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç
/edit - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç
/delete - –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è
/stats today - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
/stats week - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é
/stats month - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü

üí° <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
2. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞
3. –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ä–∞–∑—É –æ—Ç–æ–±—Ä–∞–∑—è—Ç—Å—è –Ω–∞ —Å–∞–π—Ç–µ
"""
    send_to_telegram(help_text, chat_id)

def send_products_list(chat_id):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    global products
    if not products:
        send_to_telegram("üì≠ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø—É—Å—Ç", chat_id)
        return
    
    message = "üì¶ <b>–°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:</b>\n\n"
    for i, product in enumerate(products, 1):
        status = "‚úÖ" if product.get('active', True) else "‚ùå"
        message += f"{i}. {status} <b>{escape_html(product['name'])}</b>\n"
        message += f"   –¶–µ–Ω–∞: {product['price']} ‚ÇΩ/{product['unit']}\n"
        message += f"   ID: {product['id']}\n\n"
    
    message += "\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /edit [ID] –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ /delete [ID] –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"
    send_to_telegram(message, chat_id)

def handle_product_addition(chat_id, message_text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
    global user_states
    
    if chat_id not in user_states or 'adding_product' not in user_states[chat_id]:
        # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        user_states[chat_id] = {
            'adding_product': {
                'step': 'name',
                'data': {}
            }
        }
        send_to_telegram("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:", chat_id)
        return
    
    step = user_states[chat_id]['adding_product']['step']
    product_data = user_states[chat_id]['adding_product']['data']
    
    if step == 'name':
        product_data['name'] = message_text
        user_states[chat_id]['adding_product']['step'] = 'description'
        send_to_telegram("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:", chat_id)
    
    elif step == 'description':
        product_data['description'] = message_text
        user_states[chat_id]['adding_product']['step'] = 'price'
        send_to_telegram("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø—Ä–æ–¥—É–∫—Ç–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):", chat_id)
    
    elif step == 'price':
        try:
            product_data['price'] = int(message_text)
            user_states[chat_id]['adding_product']['step'] = 'unit'
            send_to_telegram("–í–≤–µ–¥–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è (–∫–≥, —à—Ç, –∫–æ—Ä–∑–∏–Ω–∞ –∏ —Ç.–¥.):", chat_id)
        except ValueError:
            send_to_telegram("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:", chat_id)
    
    elif step == 'unit':
        product_data['unit'] = message_text
        user_states[chat_id]['adding_product']['step'] = 'image'
        send_to_telegram("–í–≤–µ–¥–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞:", chat_id)
    
    elif step == 'image':
        product_data['image'] = message_text
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
        new_product = {
            'id': max([p['id'] for p in products], default=0) + 1,
            'name': product_data['name'],
            'description': product_data['description'],
            'price': product_data['price'],
            'unit': product_data['unit'],
            'image': product_data['image'],
            'active': True
        }
        
        products.append(new_product)
        save_products(products)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        del user_states[chat_id]
        
        send_to_telegram(f"‚úÖ –ü—Ä–æ–¥—É–∫—Ç '{new_product['name']}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", chat_id)
        send_products_list(chat_id)

def handle_product_edit(chat_id, product_id, message_text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
    global user_states
    
    product = next((p for p in products if p['id'] == product_id), None)
    if not product:
        send_to_telegram("‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", chat_id)
        return
    
    if chat_id not in user_states or 'editing_product' not in user_states[chat_id]:
        # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        user_states[chat_id] = {
            'editing_product': {
                'product_id': product_id,
                'step': 'field',
                'data': product.copy()
            }
        }
        message = f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:</b> {product['name']}\n\n"
        message += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n"
        message += "1. name - –ù–∞–∑–≤–∞–Ω–∏–µ\n"
        message += "2. description - –û–ø–∏—Å–∞–Ω–∏–µ\n"
        message += "3. price - –¶–µ–Ω–∞\n"
        message += "4. unit - –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è\n"
        message += "5. image - URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
        message += "6. active - –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (true/false)\n\n"
        message += "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—è –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ:"
        send_to_telegram(message, chat_id)
        return
    
    state = user_states[chat_id]['editing_product']
    
    if state['step'] == 'field':
        field_map = {
            '1': 'name', 'name': 'name',
            '2': 'description', 'description': 'description',
            '3': 'price', 'price': 'price',
            '4': 'unit', 'unit': 'unit',
            '5': 'image', 'image': 'image',
            '6': 'active', 'active': 'active'
        }
        
        field = field_map.get(message_text.lower())
        if not field:
            send_to_telegram("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –ø–æ–ª–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:", chat_id)
            return
        
        state['field'] = field
        state['step'] = 'value'
        
        if field == 'active':
            send_to_telegram("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (true/false):", chat_id)
        else:
            current_value = product.get(field, '')
            send_to_telegram(f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_value}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:", chat_id)
    
    elif state['step'] == 'value':
        field = state['field']
        product = next((p for p in products if p['id'] == state['product_id']), None)
        
        if not product:
            send_to_telegram("‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", chat_id)
            del user_states[chat_id]
            return
        
        try:
            if field == 'price':
                product[field] = int(message_text)
            elif field == 'active':
                product[field] = message_text.lower() == 'true'
            else:
                product[field] = message_text
            
            save_products(products)
            send_to_telegram(f"‚úÖ –ü–æ–ª–µ '{field}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", chat_id)
            del user_states[chat_id]
            
        except ValueError:
            send_to_telegram("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–Ω–∞—á–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:", chat_id)

def telegram_long_polling():
    """Long polling –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram"""
    global stop_polling
    offset = 0
    
    while not stop_polling:
        try:
            url = f"https://api.telegram.org/bot{BOT_TOKEN}/getUpdates"
            params = {
                'timeout': 30,
                'offset': offset
            }
            
            response = requests.get(url, params=params, timeout=35)
            
            if response.status_code == 200:
                data = response.json()
                if data['ok'] and data['result']:
                    for update in data['result']:
                        offset = update['update_id'] + 1
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                        if 'message' in update and 'text' in update['message']:
                            handle_message(update)
            
        except requests.exceptions.Timeout:
            continue
        except requests.exceptions.ConnectionError:
            logging.warning("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram API")
            time.sleep(5)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ long polling: {e}")
            time.sleep(5)

def handle_message(update):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    message = update.get('message', {})
    chat_id = message['chat']['id']
    message_text = message.get('text', '')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if str(chat_id) not in ADMIN_CHAT_IDS:
        send_to_telegram("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", chat_id)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    if message_text.startswith('/'):
        if message_text == '/start':
            send_help_message(chat_id)
        
        elif message_text == '/help':
            send_help_message(chat_id)
        
        elif message_text == '/list':
            send_products_list(chat_id)
        
        elif message_text == '/add':
            user_states[chat_id] = {'adding_product': {'step': 'name', 'data': {}}}
            send_to_telegram("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:", chat_id)
        
        elif message_text.startswith('/edit'):
            try:
                parts = message_text.split()
                if len(parts) < 2:
                    send_to_telegram("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø—Ä–æ–¥—É–∫—Ç–∞: /edit [ID]", chat_id)
                    return
                
                product_id = int(parts[1])
                handle_product_edit(chat_id, product_id, "")
            except ValueError:
                send_to_telegram("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /edit [ID]", chat_id)
        
        elif message_text.startswith('/delete'):
            try:
                parts = message_text.split()
                if len(parts) < 2:
                    send_to_telegram("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø—Ä–æ–¥—É–∫—Ç–∞: /delete [ID]", chat_id)
                    return
                
                product_id = int(parts[1])
                product = next((p for p in products if p['id'] == product_id), None)
                
                if product:
                    products[:] = [p for p in products if p['id'] != product_id]
                    save_products(products)
                    send_to_telegram(f"‚úÖ –ü—Ä–æ–¥—É–∫—Ç '{product['name']}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!", chat_id)
                    send_products_list(chat_id)
                else:
                    send_to_telegram("‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", chat_id)
            except ValueError:
                send_to_telegram("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delete [ID]", chat_id)

        elif message_text.startswith('/stats'):
            try:
                parts = message_text.split()
                time_period = parts[1] if len(parts) > 1 else 'all'
                
                if time_period not in ['today', 'week', 'month', 'all']:
                    send_to_telegram("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /stats today/week/month/all", chat_id)
                    return
                
                stats = get_order_stats(time_period)
                if stats:
                    message = format_stats_message(stats, time_period)
                    send_to_telegram(message, chat_id)
                else:
                    send_to_telegram("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", chat_id)
                    
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
                send_to_telegram("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", chat_id)
        
        else:
            send_to_telegram("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥", chat_id)
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
    if chat_id in user_states and 'adding_product' in user_states[chat_id]:
        handle_product_addition(chat_id, message_text)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
    elif chat_id in user_states and 'editing_product' in user_states[chat_id]:
        state = user_states[chat_id]['editing_product']
        handle_product_edit(chat_id, state['product_id'], message_text)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
products = load_products()

def init_orders_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"""
    try:
        conn = sqlite3.connect(ORDERS_DB)
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS orders (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                customer_name TEXT NOT NULL,
                customer_phone TEXT NOT NULL,
                customer_address TEXT NOT NULL,
                delivery_date TEXT NOT NULL,
                delivery_time TEXT NOT NULL,
                payment_method TEXT NOT NULL,
                subtotal INTEGER NOT NULL,
                delivery_fee INTEGER NOT NULL,
                total INTEGER NOT NULL,
                comment TEXT,
                items TEXT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        conn.commit()
        conn.close()
        logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î –∑–∞–∫–∞–∑–æ–≤: {e}")

def save_order_to_db(order_data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect(ORDERS_DB)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO orders 
            (customer_name, customer_phone, customer_address, delivery_date, delivery_time, 
             payment_method, subtotal, delivery_fee, total, comment, items)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            order_data['customer']['name'],
            order_data['customer']['phone'],
            order_data['customer']['address'],
            order_data['delivery']['date'],
            order_data['delivery']['time'],
            order_data['payment'],
            order_data['totals']['subtotal'],
            order_data['totals']['delivery'],
            order_data['totals']['total'],
            order_data.get('comment', ''),
            json.dumps(order_data['items'])
        ))
        
        conn.commit()
        conn.close()
        logging.info(f"–ó–∞–∫–∞–∑ –æ—Ç {order_data['customer']['name']} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î")
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ –ë–î: {e}")
        return False

def get_order_stats(time_period='all'):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–∫–∞–∑–æ–≤"""
    try:
        conn = sqlite3.connect(ORDERS_DB)
        cursor = conn.cursor()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ª–æ–≤–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–µ—Ä–∏–æ–¥–∞
        time_conditions = {
            'today': "DATE(created_at) = DATE('now')",
            'week': "created_at >= DATE('now', '-7 days')",
            'month': "created_at >= DATE('now', '-30 days')",
            'all': "1=1"
        }
        
        condition = time_conditions.get(time_period, '1=1')
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        cursor.execute(f'''
            SELECT 
                COUNT(*) as total_orders,
                SUM(total) as total_revenue,
                AVG(total) as avg_order_value,
                COUNT(DISTINCT customer_phone) as unique_customers
            FROM orders 
            WHERE {condition}
        ''')
        
        stats = cursor.fetchone()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º (–¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞)
        cursor.execute(f'''
            SELECT 
                DATE(created_at) as order_date,
                COUNT(*) as orders_count,
                SUM(total) as daily_revenue
            FROM orders 
            WHERE {condition}
            GROUP BY DATE(created_at)
            ORDER BY order_date
        ''')
        
        daily_stats = cursor.fetchall()
        
        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        cursor.execute(f'''
            SELECT 
                json_extract(value, '$.name') as product_name,
                SUM(json_extract(value, '$.quantity')) as total_quantity,
                SUM(json_extract(value, '$.quantity') * json_extract(value, '$.price')) as total_revenue
            FROM orders, json_each(items)
            WHERE {condition}
            GROUP BY product_name
            ORDER BY total_quantity DESC
            LIMIT 10
        ''')
        
        popular_products = cursor.fetchall()
        
        conn.close()
        
        return {
            'total_orders': stats[0] or 0,
            'total_revenue': stats[1] or 0,
            'avg_order_value': stats[2] or 0,
            'unique_customers': stats[3] or 0,
            'daily_stats': daily_stats,
            'popular_products': popular_products
        }
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return None

def format_stats_message(stats, time_period):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
    period_names = {
        'today': '—Å–µ–≥–æ–¥–Ω—è',
        'week': '–∑–∞ –Ω–µ–¥–µ–ª—é',
        'month': '–∑–∞ –º–µ—Å—è—Ü',
        'all': '–∑–∞ –≤—Å–µ –≤—Ä–µ–º—è'
    }
    
    period_name = period_names.get(time_period, '–∑–∞ –≤—Å–µ –≤—Ä–µ–º—è')
    
    message = f"üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê–ö–ê–ó–û–í ({period_name})</b>\n\n"
    
    message += f"üì¶ <b>–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤:</b> {stats['total_orders']}\n"
    message += f"üí∞ <b>–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞:</b> {stats['total_revenue']} ‚ÇΩ\n"
    message += f"üìà <b>–°—Ä–µ–¥–Ω–∏–π —á–µ–∫:</b> {stats['avg_order_value']:.0f} ‚ÇΩ\n"
    message += f"üë• <b>–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:</b> {stats['unique_customers']}\n\n"
    
    # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
    if stats['popular_products']:
        message += "üèÜ <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:</b>\n"
        for i, (name, quantity, revenue) in enumerate(stats['popular_products'][:5], 1):
            message += f"{i}. {name} - {quantity} —à—Ç. ({revenue} ‚ÇΩ)\n"
        message += "\n"
    
    # –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
    if stats['daily_stats'] and len(stats['daily_stats']) > 1:
        message += "üìÖ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏:</b>\n"
        for date, count, revenue in stats['daily_stats'][-7:]:
            message += f"‚Ä¢ {date}: {count} –∑–∞–∫. ({revenue} ‚ÇΩ)\n"
    
    message += f"\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stats today/week/month/all –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"
    
    return message

@app.route('/api/order', methods=['POST'])
def receive_order():
    try:
        order_data = request.get_json()
        
        if not order_data:
            return jsonify({'error': 'No data provided'}), 400
        
        logging.info(f"–ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç {order_data['customer']['name']}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        save_order_to_db(order_data)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = format_order_message(order_data)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç)
        send_to_telegram_async(message)
        
        # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
        return jsonify({
            'message': 'Order received successfully',
            'status': 'success'
        }), 200
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞: {e}")
        return jsonify({
            'error': 'Internal server error',
            'status': 'error'
        }), 500

@app.route('/api/bot-check', methods=['GET'])
def check_bot():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"""
    try:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/getMe"
        response = requests.get(url, timeout=10)
        
        if response.status_code == 200:
            bot_info = response.json()
            return jsonify({
                'status': 'success',
                'bot_username': bot_info['result']['username'],
                'bot_name': bot_info['result']['first_name']
            }), 200
        else:
            return jsonify({
                'status': 'error',
                'message': f'Bot API returned status code: {response.status_code}'
            }), 500
            
    except Exception as e:
        return jsonify({
            'status': 'error',
            'message': f'Bot check failed: {str(e)}'
        }), 500

@app.route('/api/products', methods=['GET'])
def get_products():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    try:
        active_products = [p for p in products if p.get('active', True)]
        return jsonify(active_products), 200
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {e}")
        return jsonify({'error': 'Internal server error'}), 500

@app.route('/api/admin/products', methods=['GET'])
def get_all_products():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è)"""
    try:
        return jsonify(products), 200
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {e}")
        return jsonify({'error': 'Internal server error'}), 500

@app.route('/api/admin/products', methods=['POST'])
def add_product():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    try:
        new_product = request.get_json()
        if not new_product:
            return jsonify({'error': 'No data provided'}), 400
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID
        new_id = max([p['id'] for p in products], default=0) + 1
        new_product['id'] = new_id
        new_product['active'] = new_product.get('active', True)
        
        products.append(new_product)
        
        if save_products(products):
            return jsonify({'message': 'Product added successfully', 'product': new_product}), 201
        else:
            return jsonify({'error': 'Failed to save product'}), 500
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
        return jsonify({'error': 'Internal server error'}), 500

@app.route('/api/admin/products/<int:product_id>', methods=['PUT'])
def update_product(product_id):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    try:
        updated_data = request.get_json()
        if not updated_data:
            return jsonify({'error': 'No data provided'}), 400
        
        product_index = next((i for i, p in enumerate(products) if p['id'] == product_id), None)
        
        if product_index is None:
            return jsonify({'error': 'Product not found'}), 404
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
        updated_data['id'] = product_id
        products[product_index] = {**products[product_index], **updated_data}
        
        if save_products(products):
            return jsonify({'message': 'Product updated successfully', 'product': products[product_index]}), 200
        else:
            return jsonify({'error': 'Failed to save product'}), 500
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
        return jsonify({'error': 'Internal server error'}), 500

@app.route('/api/admin/products/<int:product_id>', methods=['DELETE'])
def delete_product(product_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    try:
        global products
        products[:] = [p for p in products if p['id'] != product_id]
        
        if save_products(products):
            return jsonify({'message': 'Product deleted successfully'}), 200
        else:
            return jsonify({'error': 'Failed to save products'}), 500
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
        return jsonify({'error': 'Internal server error'}), 500

@app.route('/api/check', methods=['GET'])
def check_api():
    return jsonify({
        'message': 'API is working!',
        'status': 'success'
    }), 200

@app.route('/')
def serve_index():
    return send_from_directory('.', 'index.html')

@app.route('/<path:path>')
def serve_static(path):
    return send_from_directory('.', path)

if __name__ == '__main__':
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–æ—Ç–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    bot_available = check_bot_availability()
    # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_orders_db()
    
    if bot_available:
        logging.info("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        for admin_id in ADMIN_CHAT_IDS:
            send_to_telegram_async("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!", admin_id)
            send_help_message(admin_id)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º long polling –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        polling_thread = threading.Thread(target=telegram_long_polling, daemon=True)
        polling_thread.start()
        logging.info("üöÄ Long polling –∑–∞–ø—É—â–µ–Ω")
    else:
        logging.warning("‚ö†Ô∏è  –ë–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
    
    try:
        app.run(host='0.0.0.0', port=5000, debug=False, threaded=True)
    except KeyboardInterrupt:
        logging.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
        stop_polling = True
